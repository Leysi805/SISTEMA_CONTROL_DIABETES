
package VISTAS;

import MODELO.cita;
import MODELO.citaDAO;
import MODELO.pacienteDAO;
import MODELO.tratamientoDAO;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Darileysi Morales
 */
public class GestionCitas extends javax.swing.JInternalFrame {
    
    citaDAO daoc = new citaDAO();
    pacienteDAO dao = new pacienteDAO();
    tratamientoDAO daot = new tratamientoDAO(); 
    DefaultTableModel modelo = new DefaultTableModel();
    int id_cita;
    int id_paciente;

    /**
     * Creates new form GestionCitas
     */
    public GestionCitas() {
        initComponents();
        cargarNombresPacientes();
        listar();
        cmbPaciente.setSelectedIndex(-1); //Inicia el combobox sin ninguna seleccion 
    }

    // Rellenar el combobox con los nombres de los pacientes
private void cargarNombresPacientes() {
    List<String> nombres = dao.listarNombres();
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(nombres.toArray(new String[0]));
    cmbPaciente.setModel(model);
}

//Listar los registros en la tabla de citas
void listar() {
    List<cita> lista = daoc.listar();
    modelo = (DefaultTableModel) tablaCitas.getModel();
    modelo.setRowCount(0); // Limpia la tabla antes de agregar nuevos datos
    // Limpiamos el ComboBox antes de agregar nuevos elementos
    cmbPaciente.removeAllItems();
    // Obtenemos la lista de pacientes
    List<String> listaPacientes = daot.listarPacientes();

    // Agregamos los nombres de los pacientes al ComboBox
    for (String nombrePaciente : listaPacientes) {
        cmbPaciente.addItem(nombrePaciente);
    }
    
    Object[] ob = new Object[5];
    
    for (int i = 0; i < lista.size(); i++) {
        ob[0] = lista.get(i).getId_cita();
        ob[1] = lista.get(i).getId_paciente();
        ob[2] = lista.get(i).getFecha();
        ob[3] = lista.get(i).getHora();
        ob[4] = lista.get(i).getMotivo_cita();
        modelo.addRow(ob);
    }
    
    tablaCitas.setModel(modelo);
    System.out.println("Listado de citas completado.");
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbPaciente = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaMotivo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCitas = new javax.swing.JTable();
        btnRegistrar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(195, 223, 234));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Cooper Black", 0, 18)); // NOI18N
        jLabel1.setText("SISTEMA DE CONTROL DE PACIENTES CON DIABETES");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel2.setText("GESTIÃ“N DE CITAS");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/Gobierno de Mexico.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/Secretaria de salud.png"))); // NOI18N

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/INSABI.png"))); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/GUERRERO.jpg"))); // NOI18N

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMAGENES/Transformando GUERRERO.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(57, 57, 57))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel7)
                .addGap(52, 52, 52)
                .addComponent(jLabel8)
                .addGap(89, 89, 89)
                .addComponent(jLabel9)
                .addGap(58, 58, 58)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel3.setText("PACIENTE");

        cmbPaciente.setBackground(new java.awt.Color(204, 204, 255));
        cmbPaciente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel4.setText("FECHA DE LA CITA");

        txtFecha.setBackground(new java.awt.Color(204, 204, 255));
        txtFecha.setBorder(null);

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel5.setText("HORA DE LA CITA");

        txtHora.setBackground(new java.awt.Color(204, 204, 255));
        txtHora.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtHora.setBorder(null);

        jLabel6.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel6.setText("MOTIVO DE LA CITA");

        txaMotivo.setBackground(new java.awt.Color(204, 204, 255));
        txaMotivo.setColumns(20);
        txaMotivo.setRows(5);
        jScrollPane1.setViewportView(txaMotivo);

        tablaCitas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id_Cita", "Id_Paciente", "Fecha", "Hora", "Motivo"
            }
        ));
        tablaCitas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCitasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaCitas);

        btnRegistrar.setBackground(new java.awt.Color(89, 171, 253));
        btnRegistrar.setFont(new java.awt.Font("Arial Narrow", 1, 12)); // NOI18N
        btnRegistrar.setText("REGISTRAR");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(89, 171, 253));
        btnActualizar.setFont(new java.awt.Font("Arial Narrow", 1, 12)); // NOI18N
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnCancelar.setBackground(new java.awt.Color(89, 171, 253));
        btnCancelar.setFont(new java.awt.Font("Arial Narrow", 1, 12)); // NOI18N
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(89, 171, 253));
        btnSalir.setFont(new java.awt.Font("Arial Narrow", 1, 12)); // NOI18N
        btnSalir.setText("SALIR");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 17, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRegistrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancelar)
                            .addComponent(btnSalir))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        agregar();
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void tablaCitasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCitasMouseClicked
        // TODO add your handling code here:
        int fila = tablaCitas.getSelectedRow();
        if (fila == -1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila");
        } else {
            id_cita = Integer.parseInt(tablaCitas.getValueAt(fila, 0).toString());         
            id_paciente = Integer.parseInt(tablaCitas.getValueAt(fila, 1).toString());
            String fecha = tablaCitas.getValueAt(fila, 2).toString();
            String hora = tablaCitas.getValueAt(fila, 3).toString();
            String motivo_cita = tablaCitas.getValueAt(fila, 4).toString();

            //Configurar el id del paciente
            String nombrePaciente = daot.obtenerPacientePorId(id_paciente);
        if (nombrePaciente != null) {
            cmbPaciente.setSelectedItem(nombrePaciente);
        } else {
            // Manejar el caso en que no se encuentre el paciente
        }
            
            //Configurar la fecha de nacimiento
            txtFecha.setText(fecha);

            //Configurar la hora
            txtHora.setText(hora);
            
            //Configurar el motivo de la cita 
            txaMotivo.setText(motivo_cita);
        }
        
    }//GEN-LAST:event_tablaCitasMouseClicked

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        actualizar();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        if (id_cita != 0) {
        int confirmacion = JOptionPane.showConfirmDialog(this, "Â¿EstÃ¡s seguro de cancelar esta cita?", "Confirmar EliminaciÃ³n", JOptionPane.YES_NO_OPTION);
        if (confirmacion == JOptionPane.YES_OPTION) {
            cancelarCita();
            listar();
            limpiar();
        }
    } else {
        JOptionPane.showMessageDialog(this, "Debe seleccionar una cita para eliminar.");
    }
    }//GEN-LAST:event_btnCancelarActionPerformed

    void agregar() {
    //Instancia de la clase pacienteDAO
    citaDAO daoc = new citaDAO(); 
        
    // Verificar si algÃºn campo obligatorio estÃ¡ vacÃ­o
    if (camposVacios()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // No se realiza la inserciÃ³n si hay campos vacÃ­os
    }

    //Tomar valor del nombre del paciente
    String nombrePaciente = (String) cmbPaciente.getSelectedItem();
    int id_paciente = daoc.obtenerIdPacientePorNombre(nombrePaciente);
    
    //Tomar valor del campo de texto fecha
    String fecha = txtFecha.getText();
    
    //Tomar valor del campo hora
    String hora = txtHora.getText();
    
    //Tomar valor del campo motivo de la cita
    String motivo_cita = txaMotivo.getText();

    // Resto del cÃ³digo para agregar el paciente...
    Object[] t = new Object[4];
    t[0] = id_paciente;
    t[1] = fecha;
    t[2] = hora;
    t[3] = motivo_cita;

    cita nuevaCita = new cita(0, id_paciente, fecha, hora, motivo_cita);
    daoc.add(nuevaCita);
    JOptionPane.showMessageDialog(this, "Cita registrada correctamente");
    listar();
    limpiar();
}

    // Verificar si algÃºn campo obligatorio estÃ¡ vacÃ­o
    boolean camposVacios() {
    return txtFecha.getText().isEmpty() || txtHora.getText().isEmpty() || txaMotivo.getText().isEmpty();
}

    //Limpiar las cajas de texto
    void limpiar(){
        txtFecha.setText("");
        txtHora.setText("");
        txaMotivo.setText("");
        // Para deseleccionar un JComboBox
        cmbPaciente.setSelectedIndex(-1);

    }
    
    void actualizar(){
        int fila = tablaCitas.getSelectedRow();
        if (fila == -1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila");
        }
        else{           
            String nombrePaciente = (String) cmbPaciente.getSelectedItem();
            int id_paciente = daot.obtenerIdPacientePorNombre(nombrePaciente);
            String fecha = txtFecha.getText();
            String hora = txtHora.getText();
            String motivo_cita = txaMotivo.getText();
            
            // Crear un objeto tratamiento
            cita c = new cita();
            c.setId_cita(id_cita);
            c.setId_paciente(id_paciente);
            c.setFecha(fecha);
            c.setHora(hora);
            c.setMotivo_cita(motivo_cita);

            // Verificar si algÃºn campo obligatorio estÃ¡ vacÃ­o
    if (camposVacios()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos obligatorios.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // No se realiza la inserciÃ³n si hay campos vacÃ­os
    }
    
            // Llamar al mÃ©todo actualizar de tratamientoDAO
            int resultado = daoc.actualizar(c);

            // Verificar si la actualizaciÃ³n fue exitosa
            if (resultado > 0) {
                JOptionPane.showMessageDialog(this, "Cita medica actualizada correctamente");
                listar(); // Actualizar la tabla despuÃ©s de la actualizaciÃ³n
            } else {
                JOptionPane.showMessageDialog(this, "Error al actualizar la cita");
            }
        }
        limpiar();
        
    }

    // MÃ©todo para eliminar una cita
void cancelarCita() {
    // Llamar al mÃ©todo eliminarCita de citaDAO
    int resultado = daoc.eliminarCita(id_cita);

    // Verificar si la eliminaciÃ³n fue exitosa
    if (resultado > 0) {
        JOptionPane.showMessageDialog(this, "Cita mÃ©dica eliminada correctamente");
        listar(); // Actualizar la tabla despuÃ©s de la eliminaciÃ³n
    } else {
        JOptionPane.showMessageDialog(this, "Error al eliminar la cita mÃ©dica");
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaCitas;
    private javax.swing.JTextArea txaMotivo;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    // End of variables declaration//GEN-END:variables
}
